# ================================
# Choose number of clusters (you can iterate to find best k)
k <- 4
cluster_assignments <- cutree(hc, k = k)
# Convert to data frame
geo_cluster_df <- data.frame(
geo = rownames(geo_summary),
cluster = as.factor(cluster_assignments)
)
# ================================
# üîÑ Step 6: Join Clusters Back to Main Data
# ================================
combined_q_lags <- combined_q_lags %>%
left_join(geo_cluster_df, by = "geo")
# Heatmap
heatmap(as.matrix(geo_summary), Rowv = as.dendrogram(hc), scale = "none")
# ================================
# üìê Step 1: Cut tree at height = 4
# ================================
# You can easily switch this value
cut_height <- 4  # try changing to 6, 8, etc. if needed
# Recut the dendrogram at chosen height
cluster_assignments <- cutree(hc, h = cut_height)
# Assign to tidy dataframe
geo_cluster_df <- data.frame(
geo = rownames(geo_summary),
cluster = as.factor(cluster_assignments)
)
# List countries by cluster
countries_by_cluster <- geo_cluster_df %>%
group_by(cluster) %>%
summarise(countries = list(sort(geo)), .groups = "drop")
# Print nicely
countries_by_cluster %>%
rowwise() %>%
mutate(print_line = paste(countries, collapse = ", ")) %>%
select(cluster, print_line) %>%
print(n = Inf)
# Merge cluster assignments back into full dataset
combined_q_lags <- combined_q_lags %>%
left_join(geo_cluster_df, by = "geo")
# Step 1: Drop all existing cluster columns
combined_q_lags_cleaned <- combined_q_lags %>%
select(-matches("^cluster(\\.|$)"))
# Step 2: Add fresh cluster assignment
combined_q_trimmed <- combined_q_trimmed %>%
left_join(geo_cluster_df, by = "geo")
saveRDS(combined_q_trimmed, "filepath")
combined_q_trimmed
str(combined_q_trimmed)
start_time <- Sys.time()
# ================================
# üöÄ Required Libraries
# ================================
library(tidyverse)
library(brms)
library(loo)
library(bayesplot)
library(broom.mixed)
library(posterior)
library(Metrics)
# ================================
# üìÖ Date Prefix for File Names
# ================================
today_str <- format(Sys.Date(), "%Y-%m-%d")
# ================================
# üì¶ Load and Prepare Data
# ================================
#combined_q_trimmed <- readRDS(
# url("https://github.com/ianhargreaves80/EuroCast_clothing_footware/raw/refs/heads/main/combined_q_trimmed.rds")
#)
combined_q_trimmed <- combined_q_trimmed %>%
group_by(geo) %>%
mutate(across(
c(volume_index, price_index, sentiment, unemployment_rate, household_income),
~ as.numeric(scale(.)), .names = "{.col}_norm"
)) %>%
ungroup()
combined_q_lags <- combined_q_trimmed %>%
group_by(geo) %>%
arrange(time) %>%
mutate(
volume_lag1       = lag(volume_index_norm, 1),
price_index_lag1  = lag(price_index_norm, 1),
sentiment_lag1    = lag(sentiment_norm, 1),
unemployment_lag1 = lag(unemployment_rate_norm, 1),
income_lag1       = lag(household_income_norm, 1),
logincome         = log(household_income)
) %>%
ungroup()
# Identify most recent quarter across all countries
holdout_quarter <- max(combined_q_lags$time)
# Split the data
holdout_data <- combined_q_lags %>% filter(time == holdout_quarter)
train_data   <- combined_q_lags %>% filter(time < holdout_quarter)
# ================================
# üîß Priors
# ================================
priors_pooled <- c(
prior(normal(100, 20), class = "Intercept", resp = "volumeindex"),
prior(normal(0, 5), class = "b", coef = "volume_lag1", resp = "volumeindex"),
prior(normal(0, 5), class = "b", coef = "price_index", resp = "volumeindex"),
prior(normal(0, 5), class = "b", coef = "sentiment_norm", resp = "volumeindex"),
prior(normal(0, 5), class = "b", coef = "unemployment_lag1", resp = "volumeindex"),
prior(exponential(1), class = "sigma", resp = "volumeindex"),
prior(normal(100, 20), class = "Intercept", resp = "priceindex"),
prior(normal(0, 5), class = "b", coef = "income_lag1", resp = "priceindex"),
prior(normal(0, 5), class = "b", coef = "unemployment_lag1", resp = "priceindex"),
prior(exponential(1), class = "sigma", resp = "priceindex"),
prior(normal(0, 5), class = "Intercept", resp = "sentiment"),
prior(normal(0, 5), class = "b", coef = "income_lag1", resp = "sentiment"),
prior(normal(0, 5), class = "b", coef = "unemployment_lag1", resp = "sentiment")
)
# ================================
# üìà Fit Pooled Model
# ================================
fit_pooled <- brm(
bf(volume_index ~ volume_lag1 + price_index + sentiment_norm + unemployment_lag1) +
bf(price_index ~ income_lag1 + unemployment_lag1) +
bf(sentiment ~ income_lag1 + unemployment_lag1) +
set_rescor(FALSE),
data = train_data,
prior = priors_pooled,
chains = 1, cores = 2, iter = 200, seed = 42,
control = list(adapt_delta = 0.99),
threads = threading(2)
)
# Get predictions for volume_index
preds_pooled <- posterior_predict(fit_pooled, newdata = holdout_data, resp = "volumeindex")
# Transpose so each row is an observation, each column is a posterior draw
preds_pooled_df <- as.data.frame(preds_pooled)
# Compute the mean of each column (i.e., average prediction for each observation)
mean_preds <- colMeans(preds_pooled_df)  # This gives a named vector of point predictions
# Convert to a dataframe and transpose
mean_preds_df <- data.frame(mean_pred = mean_preds)
# Add observed values to your prediction dataframe
mean_preds_df$obs <- holdout_data$volume_index
# Now compute the metrics
rmse_val <- rmse(mean_preds_df$obs, mean_preds_df$mean_pred)
mae_val  <- mae(mean_preds_df$obs, mean_preds_df$mean_pred)
mape_val <- mape(mean_preds_df$obs, mean_preds_df$mean_pred)
# Output as tibble
metrics_summary <- tibble(
RMSE = rmse_val,
MAE  = mae_val,
MAPE = mape_val
)
print(metrics_summary)
# ================================
# üìà Extract Pooled Posteriors
# ================================
priors_hier <- c(
prior(normal(102.79, 0.85), class = "Intercept", resp = "volumeindex"),
prior(normal(101.60, 0.20), class = "Intercept", resp = "priceindex"),
prior(normal(-12.06, 0.18), class = "Intercept", resp = "sentiment"),
prior(normal(10.06, 0.15), class = "b", coef = "volume_lag1", resp = "volumeindex"),
prior(normal(-0.0301, 0.0083), class = "b", coef = "price_index", resp = "volumeindex"),
prior(normal(0.4309, 0.132), class = "b", coef = "sentiment_norm", resp = "volumeindex"),
prior(normal(-0.416, 0.151), class = "b", coef = "unemployment_lag1", resp = "volumeindex"),
prior(normal(2.03, 0.20), class = "b", coef = "income_lag1", resp = "priceindex"),
prior(normal(0.576, 0.202), class = "b", coef = "unemployment_lag1", resp = "priceindex"),
prior(normal(0.929, 0.183), class = "b", coef = "income_lag1", resp = "sentiment"),
prior(normal(-3.97, 0.181), class = "b", coef = "unemployment_lag1", resp = "sentiment")
)
# ======================================================
# 5. Hierarchical (Multilevel) Bayesian Models
# ======================================================
fit_bayes_hier_geo <- brm(
bf(volume_index ~ volume_lag1 + price_index + sentiment_norm + unemployment_lag1 +
(1 + volume_lag1 + price_index + sentiment_norm + unemployment_lag1 | geo), family = gaussian()) +
bf(price_index ~ income_lag1 + unemployment_lag1 +
(1 + income_lag1 + unemployment_lag1 | geo), family = gaussian()) +
bf(sentiment ~ income_lag1 + unemployment_lag1 +
(1 + income_lag1 + unemployment_lag1 | geo), family = gaussian()) +
set_rescor(FALSE),
data = combined_q_lags,
prior = priors_hier,
chains = 2,
cores = 4,
iter = 100,
seed = 42,
refresh = 100,
threads = threading(2),
control = list(adapt_delta = 0.99)
)
# --- View Hierarchical Model Summary ---
summary(fit_bayes_hier_geo)
# Get predictions for volume_index
preds_hier_geo <- posterior_predict(fit_bayes_hier_geo, newdata = holdout_data, resp = "volumeindex")
# Transpose so each row is an observation, each column is a posterior draw
preds_pooled_df_hier_geo <- as.data.frame(preds_hier_geo)
# Compute the mean of each column (i.e., average prediction for each observation)
mean_preds_hier <- colMeans(preds_pooled_df_hier_geo)  # This gives a named vector of point predictions
# Convert to a dataframe and transpose
mean_preds_df_hier <- data.frame(mean_preds_hier = mean_preds)
# Add observed values to your prediction dataframe
mean_preds_df_hier$obs <- holdout_data$volume_index
# Now compute the metrics
rmse_val <- rmse(mean_preds_df_hier$obs, mean_preds_df_hier$mean_pred)
mae_val  <- mae(mean_preds_df_hier$obs, mean_preds_df_hier$mean_pred)
mape_val <- mape(mean_preds_df_hier$obs, mean_preds_df_hier$mean_pred)
# Output as tibble
metrics_summary_hier <- tibble(
RMSE = rmse_val,
MAE  = mae_val,
MAPE = mape_val
)
print(metrics_summary_hier)
fit_bayes_hier_cluster <- brm(
bf(volume_index ~ volume_lag1 + price_index + sentiment_norm + unemployment_lag1 +
(1 + volume_lag1 + price_index + sentiment_norm + unemployment_lag1 | cluster), family = gaussian()) +
bf(price_index ~ income_lag1 + unemployment_lag1 +
(1 + income_lag1 + unemployment_lag1 | cluster), family = gaussian()) +
bf(sentiment ~ income_lag1 + unemployment_lag1 +
(1 + income_lag1 + unemployment_lag1 | cluster), family = gaussian()) +
set_rescor(FALSE),
data = combined_q_lags,
prior = priors_hier,
chains = 2,
cores = 4,
iter = 100,
seed = 42,
refresh = 100,
threads = threading(2),
control = list(adapt_delta = 0.99)
)
# Pooled model
preds_pooled <- posterior_predict(fit_pooled, newdata = holdout_data, resp = "volumeindex")
mean_preds_pooled <- colMeans(as.data.frame(preds_pooled))
df_pooled <- data.frame(
obs = holdout_data$volume_index,
pred = mean_preds_pooled,
model = "Pooled"
)
# Geo-level hierarchical model
preds_geo <- posterior_predict(fit_bayes_hier_geo, newdata = holdout_data, resp = "volumeindex")
mean_preds_geo <- colMeans(as.data.frame(preds_geo))
df_geo <- data.frame(
obs = holdout_data$volume_index,
pred = mean_preds_geo,
model = "Hierarchical Geo"
)
# Cluster-level hierarchical model
preds_cluster <- posterior_predict(fit_bayes_hier_cluster, newdata = holdout_data, resp = "volumeindex")
mean_preds_cluster <- colMeans(as.data.frame(preds_cluster))
df_pooled
start_time <- Sys.time()
# ================================
# üöÄ Required Libraries
# ================================
library(tidyverse)
library(brms)
library(loo)
library(bayesplot)
library(broom.mixed)
library(posterior)
library(Metrics)
# ================================
# üìÖ Date Prefix for File Names
# ================================
today_str <- format(Sys.Date(), "%Y-%m-%d")
# ================================
# üì¶ Load and Prepare Data
# ================================
#combined_q_trimmed <- readRDS(
# url("https://github.com/ianhargreaves80/EuroCast_clothing_footware/raw/refs/heads/main/combined_q_trimmed.rds")
#)
combined_q_trimmed <- combined_q_trimmed %>%
group_by(geo) %>%
mutate(across(
c(volume_index, price_index, sentiment, unemployment_rate, household_income),
~ as.numeric(scale(.)), .names = "{.col}_norm"
)) %>%
ungroup()
combined_q_lags <- combined_q_trimmed %>%
group_by(geo) %>%
arrange(time) %>%
mutate(
volume_lag1       = lag(volume_index_norm, 1),
price_index_lag1  = lag(price_index_norm, 1),
sentiment_lag1    = lag(sentiment_norm, 1),
unemployment_lag1 = lag(unemployment_rate_norm, 1),
income_lag1       = lag(household_income_norm, 1),
logincome         = log(household_income)
) %>%
ungroup()
# Identify most recent quarter across all countries
holdout_quarter <- max(combined_q_lags$time)
# Split the data
holdout_data <- combined_q_lags %>% filter(time == holdout_quarter)
train_data   <- combined_q_lags %>% filter(time < holdout_quarter)
# ================================
# üîß Priors
# ================================
priors_pooled <- c(
prior(normal(100, 20), class = "Intercept", resp = "volumeindex"),
prior(normal(0, 5), class = "b", coef = "volume_lag1", resp = "volumeindex"),
prior(normal(0, 5), class = "b", coef = "price_index", resp = "volumeindex"),
prior(normal(0, 5), class = "b", coef = "sentiment_norm", resp = "volumeindex"),
prior(normal(0, 5), class = "b", coef = "unemployment_lag1", resp = "volumeindex"),
prior(exponential(1), class = "sigma", resp = "volumeindex"),
prior(normal(100, 20), class = "Intercept", resp = "priceindex"),
prior(normal(0, 5), class = "b", coef = "income_lag1", resp = "priceindex"),
prior(normal(0, 5), class = "b", coef = "unemployment_lag1", resp = "priceindex"),
prior(exponential(1), class = "sigma", resp = "priceindex"),
prior(normal(0, 5), class = "Intercept", resp = "sentiment"),
prior(normal(0, 5), class = "b", coef = "income_lag1", resp = "sentiment"),
prior(normal(0, 5), class = "b", coef = "unemployment_lag1", resp = "sentiment")
)
# ================================
# üìà Fit Pooled Model
# ================================
fit_pooled <- brm(
bf(volume_index ~ volume_lag1 + price_index + sentiment_norm + unemployment_lag1) +
bf(price_index ~ income_lag1 + unemployment_lag1) +
bf(sentiment ~ income_lag1 + unemployment_lag1) +
set_rescor(FALSE),
data = train_data,
prior = priors_pooled,
chains = 1, cores = 2, iter = 200, seed = 42,
control = list(adapt_delta = 0.99),
threads = threading(2)
)
# Get predictions for volume_index
preds_pooled <- posterior_predict(fit_pooled, newdata = holdout_data, resp = "volumeindex")
# Transpose so each row is an observation, each column is a posterior draw
preds_pooled_df <- as.data.frame(preds_pooled)
# Compute the mean of each column (i.e., average prediction for each observation)
mean_preds <- colMeans(preds_pooled_df)  # This gives a named vector of point predictions
# Convert to a dataframe and transpose
mean_preds_df <- data.frame(mean_pred = mean_preds)
# Add observed values to your prediction dataframe
mean_preds_df$obs <- holdout_data$volume_index
# Now compute the metrics
rmse_val <- rmse(mean_preds_df$obs, mean_preds_df$mean_pred)
mae_val  <- mae(mean_preds_df$obs, mean_preds_df$mean_pred)
mape_val <- mape(mean_preds_df$obs, mean_preds_df$mean_pred)
# Output as tibble
metrics_summary <- tibble(
RMSE = rmse_val,
MAE  = mae_val,
MAPE = mape_val
)
print(metrics_summary)
# ================================
# üìà Extract Pooled Posteriors
# ================================
priors_hier <- c(
prior(normal(102.79, 0.85), class = "Intercept", resp = "volumeindex"),
prior(normal(101.60, 0.20), class = "Intercept", resp = "priceindex"),
prior(normal(-12.06, 0.18), class = "Intercept", resp = "sentiment"),
prior(normal(10.06, 0.15), class = "b", coef = "volume_lag1", resp = "volumeindex"),
prior(normal(-0.0301, 0.0083), class = "b", coef = "price_index", resp = "volumeindex"),
prior(normal(0.4309, 0.132), class = "b", coef = "sentiment_norm", resp = "volumeindex"),
prior(normal(-0.416, 0.151), class = "b", coef = "unemployment_lag1", resp = "volumeindex"),
prior(normal(2.03, 0.20), class = "b", coef = "income_lag1", resp = "priceindex"),
prior(normal(0.576, 0.202), class = "b", coef = "unemployment_lag1", resp = "priceindex"),
prior(normal(0.929, 0.183), class = "b", coef = "income_lag1", resp = "sentiment"),
prior(normal(-3.97, 0.181), class = "b", coef = "unemployment_lag1", resp = "sentiment")
)
# ======================================================
# 5. Hierarchical (Multilevel) Bayesian Models
# ======================================================
fit_bayes_hier_geo <- brm(
bf(volume_index ~ volume_lag1 + price_index + sentiment_norm + unemployment_lag1 +
(1 + volume_lag1 + price_index + sentiment_norm + unemployment_lag1 | geo), family = gaussian()) +
bf(price_index ~ income_lag1 + unemployment_lag1 +
(1 + income_lag1 + unemployment_lag1 | geo), family = gaussian()) +
bf(sentiment ~ income_lag1 + unemployment_lag1 +
(1 + income_lag1 + unemployment_lag1 | geo), family = gaussian()) +
set_rescor(FALSE),
data = combined_q_lags,
prior = priors_hier,
chains = 2,
cores = 4,
iter = 100,
seed = 42,
refresh = 100,
threads = threading(2),
control = list(adapt_delta = 0.99)
)
# --- View Hierarchical Model Summary ---
summary(fit_bayes_hier_geo)
# Get predictions for volume_index
preds_hier_geo <- posterior_predict(fit_bayes_hier_geo, newdata = holdout_data, resp = "volumeindex")
# Transpose so each row is an observation, each column is a posterior draw
preds_pooled_df_hier_geo <- as.data.frame(preds_hier_geo)
# Compute the mean of each column (i.e., average prediction for each observation)
mean_preds_hier <- colMeans(preds_pooled_df_hier_geo)  # This gives a named vector of point predictions
# Convert to a dataframe and transpose
mean_preds_df_hier <- data.frame(mean_preds_hier = mean_preds)
# Add observed values to your prediction dataframe
mean_preds_df_hier$obs <- holdout_data$volume_index
# Now compute the metrics
rmse_val <- rmse(mean_preds_df_hier$obs, mean_preds_df_hier$mean_pred)
mae_val  <- mae(mean_preds_df_hier$obs, mean_preds_df_hier$mean_pred)
mape_val <- mape(mean_preds_df_hier$obs, mean_preds_df_hier$mean_pred)
# Output as tibble
metrics_summary_hier <- tibble(
RMSE = rmse_val,
MAE  = mae_val,
MAPE = mape_val
)
print(metrics_summary_hier)
fit_bayes_hier_cluster <- brm(
bf(volume_index ~ volume_lag1 + price_index + sentiment_norm + unemployment_lag1 +
(1 + volume_lag1 + price_index + sentiment_norm + unemployment_lag1 | cluster), family = gaussian()) +
bf(price_index ~ income_lag1 + unemployment_lag1 +
(1 + income_lag1 + unemployment_lag1 | cluster), family = gaussian()) +
bf(sentiment ~ income_lag1 + unemployment_lag1 +
(1 + income_lag1 + unemployment_lag1 | cluster), family = gaussian()) +
set_rescor(FALSE),
data = combined_q_lags,
prior = priors_hier,
chains = 2,
cores = 4,
iter = 100,
seed = 42,
refresh = 100,
threads = threading(2),
control = list(adapt_delta = 0.99)
)
# --- View Hierarchical Model Summary ---
summary(fit_bayes_hier_cluster)
# Get predictions for volume_index
preds_hier_cluster <- posterior_predict(fit_bayes_hier_cluster, newdata = holdout_data, resp = "volumeindex")
# Transpose so each row is an observation, each column is a posterior draw
preds_pooled_df_hier_cluster <- as.data.frame(preds_hier_cluster)
# Compute the mean of each column (i.e., average prediction for each observation)
mean_preds_hier_cluster <- colMeans(preds_pooled_df_hier_cluster)  # This gives a named vector of point predictions
# Convert to a dataframe and transpose
mean_preds_df_cluster <- data.frame(mean_preds_hier_cluster = mean_preds)
# Add observed values to your prediction dataframe
mean_preds_df_cluster$obs <- holdout_data$volume_index
# Now compute the metrics
rmse_val <- rmse(mean_preds_df_cluster$obs, mean_preds_df_cluster$mean_pred)
mae_val  <- mae(mean_preds_df_cluster$obs, mean_preds_df_cluster$mean_pred)
mape_val <- mape(mean_preds_df_cluster$obs, mean_preds_df_cluster$mean_pred)
# Output as tibble
metrics_summary_cluster <- tibble(
RMSE = rmse_val,
MAE  = mae_val,
MAPE = mape_val
)
print(metrics_summary_cluster)
# --- View Hierarchical Model Summary ---
summary(fit_bayes_hier_geo)
fit_bayes_hier_cluster_div_geo <- brm(
bf(volume_index ~ volume_lag1 + price_index + sentiment_norm + unemployment_lag1 +
(1 + volume_lag1 + price_index + sentiment_norm + unemployment_lag1 | cluster:geo), family = gaussian()) +
bf(price_index ~ income_lag1 + unemployment_lag1 +
(1 + income_lag1 + unemployment_lag1 | cluster:geo), family = gaussian()) +
bf(sentiment ~ income_lag1 + unemployment_lag1 +
(1 + income_lag1 + unemployment_lag1 | cluster:geo), family = gaussian()) +
set_rescor(FALSE),
data = combined_q_lags,
prior = priors_hier,
chains = 2,
cores = 4,
iter = 100,
seed = 42,
refresh = 100,
threads = threading(2),
control = list(adapt_delta = 0.99)
)
# --- View Hierarchical Model Summary ---
summary(fit_bayes_hier_cluster_div_geo)
# Pooled model
preds_pooled <- posterior_predict(fit_pooled, newdata = holdout_data, resp = "volumeindex")
mean_preds_pooled <- colMeans(as.data.frame(preds_pooled))
df_pooled <- data.frame(
obs = holdout_data$volume_index,
pred = mean_preds_pooled,
model = "Pooled"
)
# Geo-level hierarchical model
preds_geo <- posterior_predict(fit_bayes_hier_geo, newdata = holdout_data, resp = "volumeindex")
mean_preds_geo <- colMeans(as.data.frame(preds_geo))
df_geo <- data.frame(
obs = holdout_data$volume_index,
pred = mean_preds_geo,
model = "Hierarchical Geo"
)
# Cluster-level hierarchical model
preds_cluster <- posterior_predict(fit_bayes_hier_cluster, newdata = holdout_data, resp = "volumeindex")
mean_preds_cluster <- colMeans(as.data.frame(preds_cluster))
df_cluster <- data.frame(
obs = holdout_data$volume_index,
pred = mean_preds_cluster,
model = "Hierarchical Cluster"
)
# Cluster+Geo hierarchical model
preds_cluster_geo <- posterior_predict(fit_bayes_hier_cluster_div_geo, newdata = holdout_data, resp = "volumeindex")
mean_preds_cluster_geo <- colMeans(as.data.frame(preds_cluster_geo))
df_cluster_geo <- data.frame(
obs = holdout_data$volume_index,
pred = mean_preds_cluster_geo,
model = "Hierarchical Cluster + Geo"
)
# Combine all predictions into one table
all_preds <- rbind(df_cluster, df_geo, df_pooled, df_cluster_geo)
# Compute metrics per model
metrics_table <- all_preds %>%
group_by(model) %>%
summarise(
RMSE = rmse(obs, pred),
MAE = mae(obs, pred),
MAPE = mape(obs, pred)
)
# Show both predictions and metrics
all_preds  # full predictions
metrics_table  # summary metrics per model
